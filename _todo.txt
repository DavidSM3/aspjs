 CODING
========

Move sendFile / serveFile from filestore -> lib_server
 This also removes the need for res.buffer and res.writebin

Code that is common to all controllers:
/app/code -> app/common

Fix Object.combine() such that it performs sanitised, deep clone
 Sanitized as in containing members of only:
  Five object types (Array, Date, Function, Plain Object, RegExp)
  Three primitives (Boolean, Number, String)
  Two bottom values (null, undefined)
 Given a complex object o, json.parse(json.stringify(o)) should be identical to Object.combine({},o)

Consider splitting up controllers / actions in dev mode
 and combining into one file for production

Sort out Array#concat from Array#append

Filestore
 File.delete()
  removes record from docstore; if no refs exist, deletes file
 Default Tmp-File Expiry (app.cfg)

Fix xpath to not use Array#shift (like templ.xpath)

ClientRequest / ClientResponse to use Class Binary
 ClientRequest
  Accept: URL, Params, Headers, Method, PostBody, Charset/Encoding (default UTF-8), Cookies
 ClientResponse
  Read Content Type
  Parse / Decode Body if type = text/*
  Parse Multipart Body (http://code.google.com/p/v8cgi/source/browse/trunk/lib/http.js)
  Methods: getStatusCode, getBody [Binary], getBodyText, getHeader, getCookie
	

Template:
 //Default String Escaping specified in App Level Config
 //Add Directive to hard-code data values
 //Add Date/Time Formatting
 //Add Timezone Offset
 Add req.url, req.headers, req.params and req.post
 Cache Templ Data to Memory

QuickStore -> Checkin / Checkout
Create persistent (database) QuickStore

JSON:
 json.prettify() //formatted stringify
 Cyclic detection
 //Check object for toJSON function / use valueOf

Session Stuff
 (specify default session type and expiry in config)
 Mem-based Session (use app vars)
  specify expiry in minutes or max (browser session life / app pool life)
 Persistent Session
  Short-term (auth stuff)
  Long-term (e.g. shopping cart)
 Specify Options:
  1) Specify Type/Expiry when saving
  2) Use Profiles (defined in cfg / specified at save)

Request / Response:
 //Charset: UTF-8 should only be sent when content-type is "text/*"
 //Must always decodeURI(path)
 //Cookies

API Hooks:
 Provide a way to register a hook (request scope)
 Check and Execute Hooks
 //Move Error Reporting to App Hook

MSA Adapter:
 db.query returns query-instance
 //Update fn_buildQuery
 //CAST functions (guid, date)

DocStore:
 Fix GUID to be plain 32char hex
 ?? Use Collection instead of Plain Objects ??
 //And with condidtion
 col.find({name: 'Doe', age: {'>=':18}})
 //Multiple Or
 col.find([{name: 'John Doe'},{name: 'Jane Doe'}])
 col.findOne()
 col.drop (delete / removeDoc)
 pointer recs referencing another col/rec

Config should be split into layers:
 //System config options
 //Application-level config (app/config directory)
 App-wide Database config
 User-level config (cookie or login based)

Util Module:
 Serialize / Deserialize URL-Encoded string
 ParseHeaders (used in req library and httpreq)

Binary Class Optimizations:
 RegEx Hex -> For Loop
 MD5 Performance Testing
 Consider storing binary data as Native JS
  Raw String / 32-bit Int Array / Hex String
	Performance Testing


 DOCUMENT
==========
Request/Response Lifecycle
Global Object Extensions
Date/Time format syntax

[].append() behavior

Eventing:
 Prepend vs Append
 Data persistent to event chain (this)

