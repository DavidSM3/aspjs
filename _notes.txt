 Terms & Goals
===============
Web Application Platform
 easier to manipulate than traditional architecture
 avoiding the provision of high-level functionality
Request Cycle
 highly controlable, customizable routing logic
 directly instructable lower-level functionality
Simplified Process Logic
 clear role seperation
 functionality offset against simplicity
Non-assumtion of developer desires
 flexible and non-intrusive
Intuitive Semantics
 Highly configurable but with easy, conventional shorthand

request delegation mechanism



 Application Structure
=======================
All Framework Logic (System Code) exists in:
 /app/system

All Application Logic (User Code) goes in:
 /app/code
 /app/controllers

All View Logic (Template Code) goes in:
 /app/views

Config goes in:
 /app/config/config.js

Public files served to the web go in:
 /assets

Other Notes:
 /app/system/config/config.js contains fallback config used
   only when not overridden by /app/config/config.js
 

 Request / Response Lifecycle
==============================
URL Rewriting
[Asset Not Found]
dispatch.asp
<controller>.asp
 system/core/*
 system/lib/*
 code/*
 controllers/<controller>.js



 Request Event Sequence
==========================

ready
	[report-error]
route
	preroute
	[no-route]
	404



